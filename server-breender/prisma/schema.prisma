generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OWNER
  VET
  ADMIN

  @@map("role")
}

model User {
  id           String        @id @default(uuid()) @map("user_id")
  email        String        @unique
  hashedPass   String        @map("hashed_pass")
  role         Role          @default(USER)
  userProfile  UserProfile?
  refreshToken RefreshToken?
  animals      Animal[]

  @@map("users")
}

model UserProfile {
  userId     String  @id @unique @map("user_id")
  name       String  @map("user_name")
  bio        String  @default("") @map("user_bio")
  pictureUrl String? @map("picture_url")
  user       User    @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum Sex {
  MALE
  FEMALE

  @@map("sex")
}

model Animal {
  id              String           @id @default(uuid()) @map("animal_id")
  name            String           @map("animal_name")
  sex             Sex              @map("animal_sex")
  breed           String           @map("animal_breed")
  species         String           @map("animal_species")
  bio             String?          @map("animal_bio")
  birthDate       DateTime         @map("date_of_birth")
  ownerId         String           @unique @map("owner_id")
  user            User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  animalDocuments AnimalDocument[]
  animalPhoto     AnimalPhoto[]

  @@map("animals")
}

model AnimalPhoto {
  id         String   @id @default(uuid()) @map("photo_id")
  animalId   String   @map("animal_id")
  photoUrl   String   @map("photo_url")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  animal     Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_photos")
}

model AnimalDocument {
  id           String   @id @default(uuid()) @map("document_id")
  animalId     String   @map("animal_id")
  documentName String?  @map("document_name")
  documentUrl  String   @map("document_url")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  animal       Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_documents")
}
