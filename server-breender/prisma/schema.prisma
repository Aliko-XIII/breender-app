generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  VET
  ADMIN

  @@map("role")
}

enum Sex {
  MALE
  FEMALE

  @@map("sex")
}

model User {
  id           String        @id @default(uuid()) @map("user_id")
  email        String        @unique
  hashedPass   String        @map("hashed_pass")
  role         Role          @default(OWNER) // Determines the user's role
  userProfile  UserProfile?
  refreshToken RefreshToken?

  // Role-specific relationships
  owner            Owner? // Linked if the user is an OWNER
  vet              Vet? // Linked if the user is a VET
  Reminder         Reminder[]
  AnimalPermission AnimalPermission[]
  ChatParticipant  ChatParticipant[]
  Message          Message[]

  @@map("users")
}

model Owner {
  id      String        @id @default(uuid()) @map("owner_id")
  userId  String        @unique @map("user_id") // Links to the User model
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  animals AnimalOwner[]

  @@map("owners")
}

model Vet {
  id      String      @id @default(uuid()) @map("vet_id")
  userId  String      @unique @map("user_id") // Links to the User model
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  animals AnimalVet[] // Animals assigned to this vet

  @@map("vets")
}

model Animal {
  id               String             @id @default(uuid()) @map("animal_id")
  name             String             @map("animal_name")
  sex              Sex                @map("animal_sex")
  breed            String             @map("animal_breed")
  species          String             @map("animal_species")
  bio              String?            @map("animal_bio")
  birthDate        DateTime           @map("date_of_birth")
  latitude         Float?             @map("latitude")
  longitude        Float?             @map("longitude")
  owners           AnimalOwner[]
  vetAssignments   AnimalVet[]
  animalDocuments  AnimalDocument[]
  animalPhotos     AnimalPhoto[]
  animalRecords    AnimalRecord[]
  Reminder         Reminder[]
  AnimalPermission AnimalPermission[]

  @@map("animals")
}

model AnimalOwner {
  id       String @id @default(uuid())
  animalId String
  ownerId  String

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  owner  Owner  @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("animal_owners")
}

enum AssignmentStatus {
  ACTIVE
  PENDING
  REVOKED

  @@map("status")
}

model AnimalVet {
  id         String           @id @default(uuid()) @map("assignment_id")
  animalId   String           @map("animal_id")
  vetId      String           @map("vet_id")
  status     AssignmentStatus @default(PENDING) @map("status") // e.g., active, pending, revoked
  assignedAt DateTime         @default(now()) @map("assigned_at")
  animal     Animal           @relation(fields: [animalId], references: [id], onDelete: Cascade)
  vet        Vet              @relation(fields: [vetId], references: [id], onDelete: Cascade)

  @@map("animal_vets")
}

enum PermissionType {
  VIEW
  EDIT
  MANAGE
}

model AnimalPermission {
  id         String         @id @default(uuid())
  animalId   String         @map("animal_id")
  userId     String         @map("user_id")
  permission PermissionType @map("permission_type")
  grantedAt  DateTime       @default(now()) @map("granted_at")

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("animal_permissions")
}

model UserProfile {
  userId     String  @id @unique @map("user_id")
  name       String  @map("user_name")
  bio        String  @default("") @map("user_bio")
  pictureUrl String? @map("picture_url")
  phone      String? @map("phone_number")
  user       User    @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AnimalPhoto {
  id         String   @id @default(uuid()) @map("photo_id")
  animalId   String   @map("animal_id")
  photoUrl   String   @map("photo_url")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  animal     Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_photos")
}

model AnimalDocument {
  id           String   @id @default(uuid()) @map("document_id")
  animalId     String   @map("animal_id")
  documentName String?  @map("document_name")
  documentUrl  String   @map("document_url")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  animal       Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_documents")
}

enum AnimalRecordType {
  // Vet records
  CHECKUP
  SURGERY
  DIAGNOSIS
  PRESCRIPTION

  // Procedures
  MEDICATION
  VACCINATION
  DEWORMING
  DEFLEAING
  BATHING
  GROOMING
  NAILS

  // Health
  INJURY
  TEMPERATURE
  ILLNESS
  BEHAVIOR
  SLEEPING
  FECES
  URINE
  VOMIT
  WEIGHT

  // Nutrition
  FOOD
  WATER

  // Breeding
  HEAT
  MATING
  PREGNANCY
  BIRTH
  ESTROUS
  SELLING
  BUYING

  // Additional
  NOTES
  OTHER

  @@map("record_type")
}

model AnimalRecord {
  id          String           @id @default(uuid()) @map("record_id")
  animalId    String           @map("animal_id")
  recordType  AnimalRecordType @map("record_type")
  description String?          @map("description")
  createdAt   DateTime         @default(now()) @map("created_at")
  animal      Animal           @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_records")
}

enum ReminderType {
  CHECKUP
  SURGERY
  MEDICATION
  VACCINATION
  DEWORMING
  DEFLEAING
  BATHING
  GROOMING
  NAILS
  TEMPERATURE
  WEIGHT
  FOOD
  WATER
  MATING
  PREGNANCY
  BIRTH
  SELLING
  BUYING
  OTHER

  @@map("reminder_type")
}

model Reminder {
  id        String   @id @default(uuid()) @map("reminder_id")
  userId    String   @map("user_id")
  animalId  String   @map("animal_id")
  message   String   @map("message")
  remindAt  DateTime @map("remind_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Chat {
  id           String            @id @default(uuid()) @map("chat_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id       String   @id @default(uuid()) @map("participant_id")
  chatId   String   @map("chat_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id       String    @id @default(uuid()) @map("message_id")
  chatId   String    @map("chat_id")
  senderId String    @map("sender_id")
  content  String    @map("content")
  sentAt   DateTime  @default(now()) @map("sent_at")
  editedAt DateTime? @map("edited_at")

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}
